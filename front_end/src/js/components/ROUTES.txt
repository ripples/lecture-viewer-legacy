ROUTING CONCEPT:

Add or modify as desired.  The GO: -> is a redirect.

lecture-viewer.com              AUTHENTICATED ->        NOT AUTHENTICATED ->    NOT AUTHORIZED ->

  /                             -> GO: /main            GO: /login
  /login                        -> GO: /main
  /login?loggedOut=true
  /signup                       -> GO: /main
  /forgot-password              -> GO: /main
                                                        ALL SAME AS BELOW
  /#                                                    GO: /login
    /settings
    /courses
      /new
      /{courseID}
        /manage
        /{lectureID}
          /manage
          /view

        https://lectureviewer.com/login
        https://lectureviewer.com/signup
        https://lectureviewer.com/forgot-password

        https://lectureviewer.com/m/create-course
        https://lectureviewer.com/m/manage-course--c15

        https://lectureviewer.com/m/manage-lecture--c15-l23

        https://lectureviewer.com/m/watch/c15-l23#time=0m0s

LOGIN               https://lectureviewer.com/login
SIGNUP              https://lectureviewer.com/signup
PASSWORD RESET      https://lectureviewer.com/forgot-password
CREATE COURSE       https://lectureviewer.com/m/create-course
MANAGE COURSE       https://lectureviewer.com/m/manage-course--c15
(Lectures are created on the capturing system...)
MANAGE LECTURE      https://lectureviewer.com/m/manage-lecture--c15-l23
WATCH LECTURE       https://lectureviewer.com/m/watch/c15-l23#time=0m0s
ACCOUNT SETTINGS    https://lectureviewer.com/m/settings

var React               = require('react');
var Login               = require('./components/landing/Login')
var CreateAccount       = require('./components/landing/CreateAccount');
var NavigationSidebar   = require('./components/structure/NavigationSidebar');
var LectureContext      = require('./components/structure/LectureContext');
var ManageLecture       = require('./components/lectures/ManageLecture');
var SettingsContainer   = require('./components/settings/SettingsContainer');

var Router              = require('react-router');
var DefaultRoute        = Router.DefaultRoute;
var Route               = Router.Route;
var RouteHandler        = Router.RouteHandler;

var App = React.createClass({
  render: function () { return <div><RouteHandler/></div>; }
});

var Main = React.createClass({
  render: function () {

    if(this.props.params.splat) {

    }

    return (
      <div className='app-container'>
        <NavigationSidebar/>
        <LectureContext/>
      </div>
    );
  }
});

// I would like to see this structure below, but the react-router component doesn't offer a simple solution--would require parsing.
// LOGIN               https://lectureviewer.com/login
// SIGNUP              https://lectureviewer.com/signup
// FORGOT_PASSWORD     https://lectureviewer.com/forgot-password
// MAIN                https://lectureviewer.com/m
// CREATE_COURSE       https://lectureviewer.com/m/create-course
// MANAGE_COURSE       https://lectureviewer.com/m/manage-course--c15
// CREATE_LECTURE      (Lectures are created on the capturing system... Would like to upload screencasts in the future)
// MANAGE_LECTURE      https://lectureviewer.com/m/manage-lecture--c15-l23
// WATCH_LECTURE       https://lectureviewer.com/m/watch/c15-l23#time=0m0s
// SETTINGS            https://lectureviewer.com/m/settings

// Any instances of '*' can be accessed in the handling component by this.props.params.splat.
// Multiple '*' operators means that this.props.params.splat will return an array of the values in order.
var routes = (
  <Route name="root"                path="/"                          handler={App}>
    <Route name="LOGIN"             path="login"                      handler={Login}/>
    <Route name="SIGNUP"            path="signup"                     handler={CreateAccount}/>
    <Route name="FORGOT_PASSWORD"   path="forgot-password"            handler={ForgotPassword}/>
    <Route name="MAIN"              path="m"                          handler={Main}>
      <Route name="CREATE_COURSE"   path="create-course"              handler={CourseEdit}>
      <Route name="MANAGE_COURSE"   path="manage-course--c(*)"        handler={CourseEdit}>
      <Route name="MANAGE_LECTURE"  path="manage-lecture--c(*)-l(*)"  handler={ManageLecture}>
      <Route name="WATCH_LECTURE"   path="watch/c(*)-l(*)(#*)"        handler={LectureContext}/>
      <Route name="SETTINGS"        path="settings"                   handler={SettingsContainer}/>
    </Route>
    <DefaultRoute handler={Login}/>
  </Route>
);

/*============================== @RENDERING ==============================*/

// This runs the React-Router with the defined routes.  Any time a route changes, the anonymous function is called with
// the appropriate component (Handler) specified in the routes, rendering that component into the 'app' element within the HTML.

Router.run(routes, function (Handler) {
  React.render(<Handler/>, document.getElementById('app'));
});
